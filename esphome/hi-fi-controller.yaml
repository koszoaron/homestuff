esphome:
  name: hi-fi-controller
  friendly_name: Hi-Fi Controller
  devices: 
    - id: denon_avr3805
      name: "Denon AVR-3805"
    - id: pioneer_ctw620r
      name: "Pioneer CT-W620R"
    - id: marantz_cd36
      name: "Marantz CD-36"
    - id: bt_a2dp_receiver
      name: "Bluetooth Audio Receiver (QCC5125)"
    - id: fm_transmitter
      name: "FM Transmitter (SI4317)"

esp32:
  board: esp32dev  #https://grobotronics.com/images/companies/1/71kEWzr29bL._AC_SL1001_.jpg
  framework:
    type: arduino

#external component for BLE keyboard github://dmamontov/esphome-blekeyboard

external_components:
  - source: github://eigger/espcomponents@latest
    components: [ uartex ]
    refresh: always

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption_key
  reboot_timeout: 0s

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  use_address: 10.121.3.127

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Hi-Fi-Controller"

captive_portal:

uart:
  baud_rate: 9600
  rx_pin: GPIO16
  tx_pin: GPIO17
  id: amp_uart
  debug: 
    direction: BOTH
    dummy_receiver: false
    after:
      delimiter: "\r"
    sequence:
      - lambda: |-
          /* log the data */
          UARTDebug::log_string(direction, bytes);

uartex:
  rx_footer: "\r"
  tx_footer: "\r"

switch:
  - platform: uartex
    name: "Amplifier Power"
    icon: "mdi:power"
    device_id: denon_avr3805
    restore_mode: DISABLED
    state:
      data: "PW"
    state_on:
      offset: 2
      data: "ON"
    state_off:
      offset: 2
      data: "STANDBY"
    command_on:
      data: "PWON"
    command_off:
      data: "PWSTANDBY"
    command_update:
      data: "PW?"
  - platform: uartex
    name: "Muting"
    icon: "mdi:volume-mute"
    device_id: denon_avr3805
    restore_mode: DISABLED
    state:
      data: "MU"
    state_on:
      offset: 2
      data: "ON"
    state_off:
      offset: 2
      data: "OFF"
    command_on:
      data: "MUON"
    command_off:
      data: "MUOFF"
    command_update:
      data: "MU?"
  - platform: uartex
    name: "Main Zone"
    icon: "mdi:alpha-m-circle-outline"
    device_id: denon_avr3805
    restore_mode: DISABLED
    state:
      data: "ZM"
    state_on:
      offset: 2
      data: "ON"
    state_off:
      offset: 2
      data: "OFF"
    command_on:
      data: "ZMON"
    command_off:
      data: "ZMOFF"
    command_update:
      data: "ZM?"
  - platform: uartex
    name: "Zone 2 Power"
    icon: "mdi:numeric-2-circle-outline"
    device_id: denon_avr3805
    restore_mode: DISABLED
    state:
      data: "Z2"
    state_on:
      offset: 2
      data: "ON"
    state_off:
      offset: 2
      data: "OFF"
    command_on:
      data: "Z2ON"
    command_off:
      data: "Z2OFF"
  - platform: uartex
    name: "Zone 3 Power"
    icon: "mdi:numeric-3-circle-outline"
    device_id: denon_avr3805
    restore_mode: DISABLED
    state:
      data: "Z1"
    state_on:
      offset: 2
      data: "ON"
    state_off:
      offset: 2
      data: "OFF"
    command_on:
      data: "Z1ON"
    command_off:
      data: "Z1OFF"
    
select:
  - platform: uartex
    name: "Input Source"
    icon: "mdi:audio-input-stereo-minijack"
    device_id: denon_avr3805
    state:
      data: "SI"
    options:
      - PHONO
      - CD
      - TUNER
      - DVD
      - VDP
      - TV
      - DBS/SAT
      - VCR-1
      - VCR-2
      - V.AUX
      - CDR/TAPE1
    command_select: !lambda |-
      cmd_t c = { {'S', 'I'} };
      c.data.insert(c.data.end(), str.begin(), str.end());
      return c;
    state_select: !lambda |-
      return std::string(reinterpret_cast<const char*>(data), len).substr(2, (len - 2));
    command_update:
      data: "SI?"
  - platform: uartex
    name: "Zone 2 Input"
    icon: "mdi:audio-input-rca"
    device_id: denon_avr3805
    state:
      data: "Z2"
    options:
      - PHONO
      - CD
      - TUNER
      - DVD
      - VDP
      - TV
      - DBS/SAT
      - VCR-1
      - VCR-2
      - V.AUX
      - CDR/TAPE1
      - SOURCE
    command_select: !lambda |-
      cmd_t c = { {'Z', '2'} };
      c.data.insert(c.data.end(), str.begin(), str.end());
      return c;
    state_select: !lambda |-
      std::string str = std::string(reinterpret_cast<const char*>(data), len).substr(2, (len - 2));
      if (str == "ON" || str == "OFF")
      {
        return {};  //do not publish a new state, ON/OFF is handled by a switch
      }
      else if (data[2] >= '0' && data[2] <= '9')
      {
        return {};  //do not publish a new state, volume is handled by a sensor
      }
      else
      {
        return str;
      }
    command_update:
      data: "Z2?"
  - platform: uartex
    name: "Zone 3 Input"
    icon: "mdi:video-input-component"
    device_id: denon_avr3805
    state:
      data: "Z1"
    options:
      - PHONO
      - CD
      - TUNER
      - DVD
      - VDP
      - TV
      - DBS/SAT
      - VCR-1
      - VCR-2
      - V.AUX
      - CDR/TAPE1
      - SOURCE
    command_select: !lambda |-
      cmd_t c = { {'Z', '1'} };
      c.data.insert(c.data.end(), str.begin(), str.end());
      return c;
    state_select: !lambda |-
      std::string str = std::string(reinterpret_cast<const char*>(data), len).substr(2, (len - 2));
      if (str == "ON" || str == "OFF")
      {
        return {};  //do not publish a new state, ON/OFF is handled by a switch
      }
      else if (data[2] >= '0' && data[2] <= '9')
      {
        return {};  //do not publish a new state, volume is handled by a sensor
      }
      else
      {
        return str;
      }
    command_update:
      data: "Z1?"
  - platform: uartex
    name: "Recording Input"
    icon: "mdi:record-rec"
    device_id: denon_avr3805
    state:
      data: "SR"
    options:
      - PHONO
      - CD
      - TUNER
      - DVD
      - VDP
      - TV
      - DBS/SAT
      - VCR-1
      - VCR-2
      - V.AUX
      - CDR/TAPE1
      - SOURCE
    command_select: !lambda |-
      cmd_t c = { {'S', 'R'} };
      c.data.insert(c.data.end(), str.begin(), str.end());
      return c;
    state_select: !lambda |-
      return std::string(reinterpret_cast<const char*>(data), len).substr(2, (len - 2));
    command_update:
      data: "SR?"

sensor:
  - platform: uartex
    name: "Master Volume"
    icon: "mdi:volume-high"
    device_id: denon_avr3805
    accuracy_decimals: 1
    unit_of_measurement: "dB"
    state:
      data: "MV"
    lambda: !lambda |-
      uint16_t raw_volume_x10 = ((data[2] - '0') * 10 + (data[3] - '0')) * 10;
      if (len == 5 && data[4] == '5')
      {
        raw_volume_x10 += 5;
      }
      if (raw_volume_x10 == 990)
      {
        return NAN;
      }
      else
      {
        return (float)(raw_volume_x10 / 10.0f - 80.0f);
      }
    command_update:
      data: "MV?"
  - platform: uartex
    name: "Zone 2 Volume"
    icon: "mdi:volume-high"
    device_id: denon_avr3805
    id: "z2vol"
    accuracy_decimals: 1
    unit_of_measurement: "dB"
    state:
      data: "Z2"
    lambda: !lambda |-
      if (data[2] >= '0' && data[2] <= '9')  //check if the part after 'Z2' starts with a number
      {
        uint16_t raw_volume = ((data[2] - '0') * 10 + (data[3] - '0'));
        if (raw_volume == 99)
        {
          return NAN;
        }
        else
        {
          return (float)(raw_volume - 80.0f);
        }
      }
      else
      {
        return id(z2vol).state;  //publish the last state of this sensor
      }
  - platform: uartex
    name: "Zone 3 Volume"
    icon: "mdi:volume-high"
    device_id: denon_avr3805
    id: "z3vol"
    accuracy_decimals: 1
    unit_of_measurement: "dB"
    state:
      data: "Z1"
    lambda: !lambda |-
      if (data[2] >= '0' && data[2] <= '9')  //check if the part after 'Z1' starts with a number
      {
        uint16_t raw_volume = ((data[2] - '0') * 10 + (data[3] - '0'));
        if (raw_volume == 99)
        {
          return NAN;
        }
        else
        {
          return (float)(raw_volume - 80.0f);
        }
      }
      else
      {
        return id(z3vol).state;  //publish the last state of this sensor
      }
      
button:
  - platform: uartex
    name: "Master Volume Up"
    icon: "mdi:volume-plus"
    device_id: denon_avr3805
    command_on:
      data: "MVUP"
  - platform: uartex
    name: "Master Volume Down"
    icon: "mdi:volume-minus"
    device_id: denon_avr3805
    command_on:
      data: "MVDOWN"
  - platform: uartex
    name: "Zone 2 Volume Up"
    icon: "mdi:volume-plus"
    device_id: denon_avr3805
    command_on:
      data: "Z2UP"
  - platform: uartex
    name: "Zone 2 Volume Down"
    icon: "mdi:volume-minus"
    device_id: denon_avr3805
    command_on:
      data: "Z2DOWN"
  - platform: uartex
    name: "Zone 3 Volume Up"
    icon: "mdi:volume-plus"
    device_id: denon_avr3805
    command_on:
      data: "Z1UP"
  - platform: uartex
    name: "Zone 3 Volume Down"
    icon: "mdi:volume-minus"
    device_id: denon_avr3805
    command_on:
      data: "Z1DOWN"

text_sensor:
  - platform: uartex
    name: "Surround Mode"
    icon: "mdi:surround-sound"
    device_id: denon_avr3805
    state:
      data: "MS"
    lambda: |-
      return std::string(reinterpret_cast<const char*>(data + 2), (len - 2));
    command_update:
      data: "MS?"
  - platform: uartex
    name: "Tuner Frequency"
    icon: "mdi:radio-fm"
    device_id: denon_avr3805
    state:
      data: "TF"
    lambda: |-
      std::string f = std::string(reinterpret_cast<const char*>(data + 2), (len - 2));
      f.insert((f.end() - 2), ',');  //add the decimal separator
      f.append(" MHz");  //add the unit
      f.erase(f.begin());  //remove the leading zero, it is not required for FM
      if (f.at(0) == '0')
      {
        f.erase(f.begin());  //remove the leading zero, frequency is only double digit
      }
      return f;
    command_update:
      data: "TF?"
  - platform: uartex
    name: "Tuner Preset"
    icon: "mdi:radio"
    device_id: denon_avr3805
    state:
      data: "TP"
    lambda: |-
      return std::string(reinterpret_cast<const char*>(data + 2), (len - 2));
    command_update:
      data: "TP?"

text:
  - platform: uartex
    name: "Set Tuner Preset"
    icon: "mdi:tune"
    device_id: denon_avr3805
    mode: text
    command_text: !lambda |-
      cmd_t c = { {'T', 'P'} };
      c.data.insert(c.data.end(), str.begin(), str.end());
      return c;

matrix_keypad:
  id: front_panel_keys
  #device_id: marantz_cd36
  rows:  # outputs
    - pin: GPIO25
    - pin: GPIO26
    - pin: GPIO27
  columns:  # inputs
#    - pin: GPIO36
#    - pin: GPIO39
    - pin: GPIO34
    - pin: GPIO35
    - pin: GPIO14
    - pin: GPIO12

spi:
  clk_pin: GPIO18
  mosi_pin: GPIO23

font:
  - file: "fonts/5x7_MT_Pixel.ttf"
    id: digit_font8
    size: 7

display:
  - platform: ssd1322_spi
    #device_id: marantz_cd36
    model: "SSD1322 256x64"
    reset_pin: GPIO32
    cs_pin: GPIO5
    dc_pin: GPIO33
    lambda: |-
      it.print(0, 0, id(digit_font8), "HELLO WORLD!");

#wired IR TX (Pioneer) for tape deck control + optional receiver via Denon input
  #device_id: pioneer_ctw620r
#matrix keypad for CD player (CD-36) keys (11)
  #device_id: marantz_cd36
#LCD/OLED display in CD-36
  #device_id: marantz_cd36
#[optional] IR receiver in CD-36
  #device_id: marantz_cd36
#[optional] UART interface reservation for BT audio receiver interface
  #device_id: bt_a2dp_receiver
#[optional] trigger outputs